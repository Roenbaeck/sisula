<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="utf-8" />
   <title>sisula Loading Report</title>

   <HTA:APPLICATION
        APPLICATIONNAME="sisula Loading Report"
        ICON="LoadingReport.ico"
        SCROLL="yes"
 	      SINGLEINSTANCE="yes"
 	      WINDOWSTATE="maximize"
        ID="sisula"
    />

    <!-- web fonts -->
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'/>

    <style type="text/css">
      body {
		    font:               10pt "Open Sans", "Helvetica Neue", sans-serif;
		    color:              #000000;
		    background:         #f9f8f7;
  		}
      select, input {
  			width: 				        10em;
  		}
  		label {
  			position: 			      relative;
  			top: 				          -3px;
  			padding-right: 		    10px;
  			padding-left: 		    10px;
  		}
    </style>

    <script
    type="text/javascript" src="https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization',
           'version':'1','packages':['timeline']}]}"></script>

    <script type="text/javascript" language="JavaScript">

    function fetchDatabases() {
      var statement = "select [name] from master.sys.databases;"
      var result = query(statement);
      populateSelect('databases', result, 'name', 'name');
    }
    function query(statement) {
      var connection = new ActiveXObject("ADODB.Connection");
      var connectionString =
          "Provider=SQLOLEDB.1;" +
          "Integrated Security=SSPI;" +
          "Persist Security Info=True;" +
          "Initial Catalog=" + (databases.value || 'master') + ";" +
          "Data Source=" + server.value + ";" +
          "Use Procedure for Prepare=1;" +
          "Auto Translate=True;" +
          "Packet Size=4096;" +
          "Use Encryption for Data=False;" +
          "Tag with column collation when possible=False"
      connection.Open(connectionString);
      // alert(connectionString);
      return connection.Execute(statement);
    }
    function populateSelect(select, result, optionField, valueField) {
      var selectElement = document.getElementById(select);
      while (selectElement.firstChild) {
          selectElement.removeChild(selectElement.firstChild);
      }
      while(!result.EOF) {
        var option = document.createElement('option');
        option.value = result.Fields(valueField);
        option.innerHTML = result.Fields(optionField);
        selectElement.appendChild(option);
        result.MoveNext();
      }
    }

    function drawJobChart() {

      var statement = "\
      select \
      	jb.JB_ID, \
      	jb.JB_EST_EST_ExecutionStatus, \
      	jb.JB_NAM_JON_JobName, \
      	datepart(year, v.date_JB_STA_Job_Start) as year_JB_STA_Job_Start, \
      	datepart(month, v.date_JB_STA_Job_Start) as month_JB_STA_Job_Start, \
      	datepart(day, v.date_JB_STA_Job_Start) as day_JB_STA_Job_Start, \
      	datepart(hour, v.time_JB_STA_Job_Start) as hour_JB_STA_Job_Start, \
      	datepart(minute, v.time_JB_STA_Job_Start) as minute_JB_STA_Job_Start, \
      	datepart(second, v.time_JB_STA_Job_Start) as second_JB_STA_Job_Start, \
        datepart(millisecond, v.time_JB_STA_Job_Start) as millisecond_JB_STA_Job_Start, \
      	datepart(hour, v.time_JB_END_Job_End) as hour_JB_END_Job_End, \
      	datepart(minute, v.time_JB_END_Job_End) as minute_JB_END_Job_End, \
      	datepart(second, v.time_JB_END_Job_End) as second_JB_END_Job_End, \
        datepart(millisecond, v.time_JB_END_Job_End) as millisecond_JB_END_Job_End, \
      	jb.JB_AID_AID_AgentJobId \
      from \
      	metadata.lJB_Job jb \
      outer apply ( \
          values ( \
      		case when jb.JB_EST_EST_ExecutionStatus = 'Running' then getdate() else jb.JB_END_Job_End end \
      	) \
      ) t (trans_JB_END_Job_End) \
      outer apply ( \
      	values ( \
      		cast(jb.JB_STA_Job_Start as date), \
      		cast(t.trans_JB_END_Job_End as date), \
      		cast(jb.JB_STA_Job_Start as time(3)), \
      		cast(t.trans_JB_END_Job_End as time(3)) \
      	) \
      ) v (date_JB_STA_Job_Start, date_JB_END_Job_End, time_JB_STA_Job_Start, time_JB_END_Job_End) \
      order by \
        JB_ID desc; \
      ";
      var result = query(statement);

      var year_JB_STA_Job_Start,
          month_JB_STA_Job_Start,
          day_JB_STA_Job_Start,
          hour_JB_STA_Job_Start,
          minute_JB_STA_Job_Start,
          second_JB_STA_Job_Start,
          millisecond_JB_STA_Job_Start,
          hour_JB_END_Job_End,
          minute_JB_END_Job_End,
          second_JB_END_Job_End,
          millisecond_JB_END_Job_End,
          JB_NAM_JON_JobName,
          JB_EST_EST_ExecutionStatus,
          JB_ID;

      var rows = [];

      while(!result.EOF) {
        year_JB_STA_Job_Start = result.Fields('year_JB_STA_Job_Start');
        month_JB_STA_Job_Start = ('00' + result.Fields('month_JB_STA_Job_Start')).slice(-2);
        day_JB_STA_Job_Start = ('00' + result.Fields('day_JB_STA_Job_Start')).slice(-2);
        hour_JB_STA_Job_Start = result.Fields('hour_JB_STA_Job_Start');
        minute_JB_STA_Job_Start = result.Fields('minute_JB_STA_Job_Start');
        second_JB_STA_Job_Start = result.Fields('second_JB_STA_Job_Start');
        millisecond_JB_STA_Job_Start = result.Fields('millisecond_JB_STA_Job_Start');
        hour_JB_END_Job_End = result.Fields('hour_JB_END_Job_End');
        minute_JB_END_Job_End = result.Fields('minute_JB_END_Job_End');
        second_JB_END_Job_End = result.Fields('second_JB_END_Job_End');
        millisecond_JB_END_Job_End = result.Fields('millisecond_JB_END_Job_End');
        JB_NAM_JON_JobName = '' + result.Fields('JB_NAM_JON_JobName');
        JB_EST_EST_ExecutionStatus = '' + result.Fields('JB_EST_EST_ExecutionStatus');
        JB_ID =  0 + result.Fields('JB_ID');

        rows.push({
            c:[
              {v: year_JB_STA_Job_Start + '-' + month_JB_STA_Job_Start + '-' + day_JB_STA_Job_Start},
              {v: JB_NAM_JON_JobName},
              {v: new Date(
                    0, 0, 0,
                    hour_JB_STA_Job_Start,
                    minute_JB_STA_Job_Start,
                    second_JB_STA_Job_Start,
                    millisecond_JB_STA_Job_Start
                  )
              },
              {v: new Date(
                    0, 0, 0,
                    hour_JB_END_Job_End,
                    minute_JB_END_Job_End,
                    second_JB_END_Job_End,
                    millisecond_JB_END_Job_End
                  )
              },
              {v: JB_EST_EST_ExecutionStatus},
              {v: JB_ID}
            ]
        });

        result.MoveNext();
      }

      var container = document.getElementById('job');
      var chart = new google.visualization.Timeline(container);

      var dataTable = new google.visualization.DataTable(
        {
          cols: [
            {id: 'Day',    label: 'Day',    type: 'string'},
            {id: 'Name',   label: 'Name',   type: 'string'},
            {id: 'Start',  label: 'Start',  type: 'datetime'},
            {id: 'End',    label: 'End',    type: 'datetime'},
            {id: 'Result', label: 'Result', type: 'string'},
            {id: 'JB_ID',  label: 'JB_ID',  type: 'number'}
          ],
          rows: rows
        }
      );

      var rowHeight = 41;
      var chartHeight = (dataTable.getNumberOfRows() + 1) * rowHeight;

      var colors = [];
      var colorMap = {
          // should contain a map of category -> color for every category
          Success: '#99d594',
          Failure: '#fc8d59',
          Running: '#ffffbf'
      }
      for (var i = 0; i < dataTable.getNumberOfRows(); i++) {
          colors.push(colorMap[dataTable.getValue(i, 4)]);
      }

      var options = {
          timeline: { groupByRowLabel: true, colorByRowLabel: false },
          avoidOverlappingGridLines: false,
          colors: colors,
          height: chartHeight,
          width: '90%'
      };

      // use a DataView to hide the category column from the Timeline
      var view = new google.visualization.DataView(dataTable);
      view.setColumns([0, 1, 2, 3]);

      chart.draw(view, options);
      google.visualization.events.addListener(chart, 'select',
        function selectHandler(e) {
          drawWorkChart(dataTable.getValue(chart.getSelection()[0].row, 5));
        }
      );

      document.getElementById('refresh').disabled = false;
    }

    function drawWorkChart(JB_ID) {
      var statement = "\
      select \
      	wo.WO_ID, \
      	wo.WO_EST_EST_ExecutionStatus, \
      	wo.WO_NAM_WON_WorkName, \
      	datepart(year, v.date_WO_STA_Work_Start) as year_WO_STA_Work_Start, \
      	datepart(month, v.date_WO_STA_Work_Start) as month_WO_STA_Workb_Start, \
      	datepart(day, v.date_WO_STA_Work_Start) as day_WO_STA_Work_Start, \
      	datepart(hour, v.time_WO_STA_Work_Start) as hour_WO_STA_Work_Start, \
      	datepart(minute, v.time_WO_STA_Work_Start) as minute_WO_STA_Work_Start, \
      	datepart(second, v.time_WO_STA_Work_Start) as second_WO_STA_Work_Start, \
      	datepart(millisecond, v.time_WO_STA_Work_Start) as millisecond_WO_STA_Work_Start, \
      	datepart(hour, v.time_WO_END_Work_End) as hour_WO_END_Work_End, \
      	datepart(minute, v.time_WO_END_Work_End) as minute_WO_END_Work_End, \
      	datepart(second, v.time_WO_END_Work_End) as second_WO_END_Work_End, \
      	datepart(millisecond, v.time_WO_END_Work_End) as millisecond_WO_END_Work_End, \
      	isnull(wo.WO_ERM_Work_ErrorMessage, '') as WO_ERM_Work_ErrorMessage, \
          v.Work_Duration, \
      	wo.WO_AID_Work_AgentStepId \
      from  \
      	metadata.lWO_part_JB_of wojb \
      join \
      	metadata.lWO_Work wo \
      on \
      	wo.WO_ID = wojb.WO_ID_part \
      outer apply ( \
          values ( \
      		case when wo.WO_EST_EST_ExecutionStatus = 'Running' then getdate() else wo.WO_END_Work_End end \
      	) \
      ) t (trans_WO_END_Work_End) \
      outer apply ( \
      	values ( \
      		cast(wo.WO_STA_Work_Start as date), \
      		cast(t.trans_WO_END_Work_End as date), \
      		cast(WO.WO_STA_Work_Start as time(3)), \
      		cast(t.trans_WO_END_Work_End as time(3)), \
      		DATEDIFF(s, wo.WO_STA_Work_Start, t.trans_WO_END_Work_End)  \
      	) \
      ) v (date_WO_STA_Work_Start, date_WO_END_Work_End, time_WO_STA_Work_Start, time_WO_END_Work_End, Work_Duration) \
      where \
      	wojb.JB_ID_of = " + JB_ID + " \
      ";
      var result = query(statement);

      var year_WO_STA_Work_Start,
          month_WO_STA_Workb_Start,
          day_WO_STA_Work_Start,
          hour_WO_STA_Work_Start,
          minute_WO_STA_Work_Start,
          second_WO_STA_Work_Start,
          millisecond_WO_STA_Work_Start,
          hour_WO_END_Work_End,
          minute_WO_END_Work_End,
          second_WO_END_Work_End,
          millisecond_WO_END_Work_End,
          WO_NAM_WON_WorkName,
          WO_EST_EST_ExecutionStatus,
          WO_ERM_Work_ErrorMessage,
          WO_ID;

      var rows = [];
      var errorMessage = '';

      while(!result.EOF) {
        year_WO_STA_Work_Start = result.Fields('year_WO_STA_Work_Start');
        month_WO_STA_Workb_Start = ('00' + result.Fields('month_WO_STA_Workb_Start')).slice(-2);
        day_WO_STA_Work_Start = ('00' + result.Fields('day_WO_STA_Work_Start')).slice(-2);
        hour_WO_STA_Work_Start = result.Fields('hour_WO_STA_Work_Start');
        minute_WO_STA_Work_Start = result.Fields('minute_WO_STA_Work_Start');
        second_WO_STA_Work_Start = result.Fields('second_WO_STA_Work_Start');
        millisecond_WO_STA_Work_Start = result.Fields('millisecond_WO_STA_Work_Start');
        hour_WO_END_Work_End = result.Fields('hour_WO_END_Work_End');
        minute_WO_END_Work_End = result.Fields('minute_WO_END_Work_End');
        second_WO_END_Work_End = result.Fields('second_WO_END_Work_End');
        millisecond_WO_END_Work_End = result.Fields('millisecond_WO_END_Work_End');
        WO_NAM_WON_WorkName = '' + result.Fields('WO_NAM_WON_WorkName');
        WO_EST_EST_ExecutionStatus = '' + result.Fields('WO_EST_EST_ExecutionStatus');
        WO_ERM_Work_ErrorMessage = '' + result.Fields('WO_ERM_Work_ErrorMessage');
        WO_ID =  0 + result.Fields('WO_ID');

        rows.push({
            c:[
              {v: year_WO_STA_Work_Start + '-' + month_WO_STA_Workb_Start + '-' + day_WO_STA_Work_Start},
              {v: WO_NAM_WON_WorkName},
              {v: new Date(
                    0, 0, 0,
                    hour_WO_STA_Work_Start,
                    minute_WO_STA_Work_Start,
                    second_WO_STA_Work_Start,
                    millisecond_WO_STA_Work_Start
                  )
              },
              {v: new Date(
                    0, 0, 0,
                    hour_WO_END_Work_End,
                    minute_WO_END_Work_End,
                    second_WO_END_Work_End,
                    millisecond_WO_END_Work_End
                  )
              },
              {v: WO_EST_EST_ExecutionStatus},
              {v: WO_ID}
            ]
        });

        errorMessage += WO_ERM_Work_ErrorMessage;

        result.MoveNext();
      }

      var container = document.getElementById('work');
      while(container.firstChild){
          container.removeChild(container.firstChild);
      }

      var text = document.getElementById('text');
      while(text.firstChild){
          text.removeChild(text.firstChild);
      }

      if(rows.length > 0) {
        var chart = new google.visualization.Timeline(container);

        var dataTable = new google.visualization.DataTable(
          {
            cols: [
              {id: 'Day',    label: 'Day',    type: 'string'},
              {id: 'Name',   label: 'Name',   type: 'string'},
              {id: 'Start',  label: 'Start',  type: 'datetime'},
              {id: 'End',    label: 'End',    type: 'datetime'},
              {id: 'Result', label: 'Result', type: 'string'},
              {id: 'WO_ID',  label: 'WO_ID',  type: 'number'}
            ],
            rows: rows
          }
        );

        var rowHeight = 41;
        var chartHeight = (dataTable.getNumberOfRows() + 1) * rowHeight;

        var colors = [];
        var colorMap = {
            // should contain a map of category -> color for every category
            Success: '#99d594',
            Failure: '#fc8d59',
            Running: '#ffffbf'
        }
        for (var i = 0; i < dataTable.getNumberOfRows(); i++) {
            colors.push(colorMap[dataTable.getValue(i, 4)]);
        }

        var options = {
            timeline: { groupByRowLabel: true, colorByRowLabel: false },
            avoidOverlappingGridLines: true,
            colors: colors,
            height: 100,
            width: '90%'
        };

        // use a DataView to hide the category column from the Timeline
        var view = new google.visualization.DataView(dataTable);
        view.setColumns([0, 1, 2, 3]);

        chart.draw(view, options);
        text.appendChild(document.createTextNode(errorMessage));

      }
      text.appendChild(document.createElement('br'));
      text.appendChild(document.createTextNode('JB_ID: ' + JB_ID));
    }

    </script>
    </head>
<body>
  <label for="server">Server:</label><input id="server" type="text" value="" />
	<input id="connect" type="button" value="Connect" onclick="fetchDatabases()" />
	<label for="database">Database:</label><select id="databases" onchange="drawJobChart()"></select>
  <input id="refresh" type="button" value="Refresh" onclick="drawJobChart()" disabled="true" />
  <p>
    <div id="work"></div>
    <div id="text"></div>
    <div id="job"></div>
  </p>
</body>
</html>
